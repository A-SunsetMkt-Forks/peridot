/*
 * peridot/proto/v1/batch.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: version not set
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package peridotopenapi

import (
	"encoding/json"
)

// ImportServiceImportPackageBody struct for ImportServiceImportPackageBody
type ImportServiceImportPackageBody struct {
	PackageName *string `json:"packageName,omitempty"`
	PackageId *string `json:"packageId,omitempty"`
	Vre *V1VersionRelease `json:"vre,omitempty"`
	SetInactive *bool `json:"setInactive,omitempty"`
}

// NewImportServiceImportPackageBody instantiates a new ImportServiceImportPackageBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportServiceImportPackageBody() *ImportServiceImportPackageBody {
	this := ImportServiceImportPackageBody{}
	return &this
}

// NewImportServiceImportPackageBodyWithDefaults instantiates a new ImportServiceImportPackageBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportServiceImportPackageBodyWithDefaults() *ImportServiceImportPackageBody {
	this := ImportServiceImportPackageBody{}
	return &this
}

// GetPackageName returns the PackageName field value if set, zero value otherwise.
func (o *ImportServiceImportPackageBody) GetPackageName() string {
	if o == nil || o.PackageName == nil {
		var ret string
		return ret
	}
	return *o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportServiceImportPackageBody) GetPackageNameOk() (*string, bool) {
	if o == nil || o.PackageName == nil {
		return nil, false
	}
	return o.PackageName, true
}

// HasPackageName returns a boolean if a field has been set.
func (o *ImportServiceImportPackageBody) HasPackageName() bool {
	if o != nil && o.PackageName != nil {
		return true
	}

	return false
}

// SetPackageName gets a reference to the given string and assigns it to the PackageName field.
func (o *ImportServiceImportPackageBody) SetPackageName(v string) {
	o.PackageName = &v
}

// GetPackageId returns the PackageId field value if set, zero value otherwise.
func (o *ImportServiceImportPackageBody) GetPackageId() string {
	if o == nil || o.PackageId == nil {
		var ret string
		return ret
	}
	return *o.PackageId
}

// GetPackageIdOk returns a tuple with the PackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportServiceImportPackageBody) GetPackageIdOk() (*string, bool) {
	if o == nil || o.PackageId == nil {
		return nil, false
	}
	return o.PackageId, true
}

// HasPackageId returns a boolean if a field has been set.
func (o *ImportServiceImportPackageBody) HasPackageId() bool {
	if o != nil && o.PackageId != nil {
		return true
	}

	return false
}

// SetPackageId gets a reference to the given string and assigns it to the PackageId field.
func (o *ImportServiceImportPackageBody) SetPackageId(v string) {
	o.PackageId = &v
}

// GetVre returns the Vre field value if set, zero value otherwise.
func (o *ImportServiceImportPackageBody) GetVre() V1VersionRelease {
	if o == nil || o.Vre == nil {
		var ret V1VersionRelease
		return ret
	}
	return *o.Vre
}

// GetVreOk returns a tuple with the Vre field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportServiceImportPackageBody) GetVreOk() (*V1VersionRelease, bool) {
	if o == nil || o.Vre == nil {
		return nil, false
	}
	return o.Vre, true
}

// HasVre returns a boolean if a field has been set.
func (o *ImportServiceImportPackageBody) HasVre() bool {
	if o != nil && o.Vre != nil {
		return true
	}

	return false
}

// SetVre gets a reference to the given V1VersionRelease and assigns it to the Vre field.
func (o *ImportServiceImportPackageBody) SetVre(v V1VersionRelease) {
	o.Vre = &v
}

// GetSetInactive returns the SetInactive field value if set, zero value otherwise.
func (o *ImportServiceImportPackageBody) GetSetInactive() bool {
	if o == nil || o.SetInactive == nil {
		var ret bool
		return ret
	}
	return *o.SetInactive
}

// GetSetInactiveOk returns a tuple with the SetInactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportServiceImportPackageBody) GetSetInactiveOk() (*bool, bool) {
	if o == nil || o.SetInactive == nil {
		return nil, false
	}
	return o.SetInactive, true
}

// HasSetInactive returns a boolean if a field has been set.
func (o *ImportServiceImportPackageBody) HasSetInactive() bool {
	if o != nil && o.SetInactive != nil {
		return true
	}

	return false
}

// SetSetInactive gets a reference to the given bool and assigns it to the SetInactive field.
func (o *ImportServiceImportPackageBody) SetSetInactive(v bool) {
	o.SetInactive = &v
}

func (o ImportServiceImportPackageBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PackageName != nil {
		toSerialize["packageName"] = o.PackageName
	}
	if o.PackageId != nil {
		toSerialize["packageId"] = o.PackageId
	}
	if o.Vre != nil {
		toSerialize["vre"] = o.Vre
	}
	if o.SetInactive != nil {
		toSerialize["setInactive"] = o.SetInactive
	}
	return json.Marshal(toSerialize)
}

type NullableImportServiceImportPackageBody struct {
	value *ImportServiceImportPackageBody
	isSet bool
}

func (v NullableImportServiceImportPackageBody) Get() *ImportServiceImportPackageBody {
	return v.value
}

func (v *NullableImportServiceImportPackageBody) Set(val *ImportServiceImportPackageBody) {
	v.value = val
	v.isSet = true
}

func (v NullableImportServiceImportPackageBody) IsSet() bool {
	return v.isSet
}

func (v *NullableImportServiceImportPackageBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportServiceImportPackageBody(val *ImportServiceImportPackageBody) *NullableImportServiceImportPackageBody {
	return &NullableImportServiceImportPackageBody{value: val, isSet: true}
}

func (v NullableImportServiceImportPackageBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportServiceImportPackageBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


