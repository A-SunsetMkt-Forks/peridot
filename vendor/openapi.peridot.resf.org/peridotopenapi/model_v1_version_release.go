/*
 * peridot/proto/v1/batch.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: version not set
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package peridotopenapi

import (
	"encoding/json"
)

// V1VersionRelease struct for V1VersionRelease
type V1VersionRelease struct {
	Version *string `json:"version,omitempty"`
	Release *string `json:"release,omitempty"`
}

// NewV1VersionRelease instantiates a new V1VersionRelease object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1VersionRelease() *V1VersionRelease {
	this := V1VersionRelease{}
	return &this
}

// NewV1VersionReleaseWithDefaults instantiates a new V1VersionRelease object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1VersionReleaseWithDefaults() *V1VersionRelease {
	this := V1VersionRelease{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *V1VersionRelease) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VersionRelease) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *V1VersionRelease) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *V1VersionRelease) SetVersion(v string) {
	o.Version = &v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *V1VersionRelease) GetRelease() string {
	if o == nil || o.Release == nil {
		var ret string
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VersionRelease) GetReleaseOk() (*string, bool) {
	if o == nil || o.Release == nil {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *V1VersionRelease) HasRelease() bool {
	if o != nil && o.Release != nil {
		return true
	}

	return false
}

// SetRelease gets a reference to the given string and assigns it to the Release field.
func (o *V1VersionRelease) SetRelease(v string) {
	o.Release = &v
}

func (o V1VersionRelease) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Release != nil {
		toSerialize["release"] = o.Release
	}
	return json.Marshal(toSerialize)
}

type NullableV1VersionRelease struct {
	value *V1VersionRelease
	isSet bool
}

func (v NullableV1VersionRelease) Get() *V1VersionRelease {
	return v.value
}

func (v *NullableV1VersionRelease) Set(val *V1VersionRelease) {
	v.value = val
	v.isSet = true
}

func (v NullableV1VersionRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableV1VersionRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1VersionRelease(val *V1VersionRelease) *NullableV1VersionRelease {
	return &NullableV1VersionRelease{value: val, isSet: true}
}

func (v NullableV1VersionRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1VersionRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


