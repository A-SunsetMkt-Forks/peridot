/*
 * peridot/proto/v1/batch.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: version not set
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package peridotopenapi

import (
	"encoding/json"
)

// V1PackageFilters struct for V1PackageFilters
type V1PackageFilters struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Modular *bool `json:"modular,omitempty"`
	NameExact *string `json:"nameExact,omitempty"`
	NoImports *bool `json:"noImports,omitempty"`
	NoBuilds *bool `json:"noBuilds,omitempty"`
}

// NewV1PackageFilters instantiates a new V1PackageFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PackageFilters() *V1PackageFilters {
	this := V1PackageFilters{}
	return &this
}

// NewV1PackageFiltersWithDefaults instantiates a new V1PackageFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PackageFiltersWithDefaults() *V1PackageFilters {
	this := V1PackageFilters{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1PackageFilters) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PackageFilters) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1PackageFilters) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1PackageFilters) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1PackageFilters) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PackageFilters) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1PackageFilters) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1PackageFilters) SetName(v string) {
	o.Name = &v
}

// GetModular returns the Modular field value if set, zero value otherwise.
func (o *V1PackageFilters) GetModular() bool {
	if o == nil || o.Modular == nil {
		var ret bool
		return ret
	}
	return *o.Modular
}

// GetModularOk returns a tuple with the Modular field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PackageFilters) GetModularOk() (*bool, bool) {
	if o == nil || o.Modular == nil {
		return nil, false
	}
	return o.Modular, true
}

// HasModular returns a boolean if a field has been set.
func (o *V1PackageFilters) HasModular() bool {
	if o != nil && o.Modular != nil {
		return true
	}

	return false
}

// SetModular gets a reference to the given bool and assigns it to the Modular field.
func (o *V1PackageFilters) SetModular(v bool) {
	o.Modular = &v
}

// GetNameExact returns the NameExact field value if set, zero value otherwise.
func (o *V1PackageFilters) GetNameExact() string {
	if o == nil || o.NameExact == nil {
		var ret string
		return ret
	}
	return *o.NameExact
}

// GetNameExactOk returns a tuple with the NameExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PackageFilters) GetNameExactOk() (*string, bool) {
	if o == nil || o.NameExact == nil {
		return nil, false
	}
	return o.NameExact, true
}

// HasNameExact returns a boolean if a field has been set.
func (o *V1PackageFilters) HasNameExact() bool {
	if o != nil && o.NameExact != nil {
		return true
	}

	return false
}

// SetNameExact gets a reference to the given string and assigns it to the NameExact field.
func (o *V1PackageFilters) SetNameExact(v string) {
	o.NameExact = &v
}

// GetNoImports returns the NoImports field value if set, zero value otherwise.
func (o *V1PackageFilters) GetNoImports() bool {
	if o == nil || o.NoImports == nil {
		var ret bool
		return ret
	}
	return *o.NoImports
}

// GetNoImportsOk returns a tuple with the NoImports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PackageFilters) GetNoImportsOk() (*bool, bool) {
	if o == nil || o.NoImports == nil {
		return nil, false
	}
	return o.NoImports, true
}

// HasNoImports returns a boolean if a field has been set.
func (o *V1PackageFilters) HasNoImports() bool {
	if o != nil && o.NoImports != nil {
		return true
	}

	return false
}

// SetNoImports gets a reference to the given bool and assigns it to the NoImports field.
func (o *V1PackageFilters) SetNoImports(v bool) {
	o.NoImports = &v
}

// GetNoBuilds returns the NoBuilds field value if set, zero value otherwise.
func (o *V1PackageFilters) GetNoBuilds() bool {
	if o == nil || o.NoBuilds == nil {
		var ret bool
		return ret
	}
	return *o.NoBuilds
}

// GetNoBuildsOk returns a tuple with the NoBuilds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PackageFilters) GetNoBuildsOk() (*bool, bool) {
	if o == nil || o.NoBuilds == nil {
		return nil, false
	}
	return o.NoBuilds, true
}

// HasNoBuilds returns a boolean if a field has been set.
func (o *V1PackageFilters) HasNoBuilds() bool {
	if o != nil && o.NoBuilds != nil {
		return true
	}

	return false
}

// SetNoBuilds gets a reference to the given bool and assigns it to the NoBuilds field.
func (o *V1PackageFilters) SetNoBuilds(v bool) {
	o.NoBuilds = &v
}

func (o V1PackageFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Modular != nil {
		toSerialize["modular"] = o.Modular
	}
	if o.NameExact != nil {
		toSerialize["nameExact"] = o.NameExact
	}
	if o.NoImports != nil {
		toSerialize["noImports"] = o.NoImports
	}
	if o.NoBuilds != nil {
		toSerialize["noBuilds"] = o.NoBuilds
	}
	return json.Marshal(toSerialize)
}

type NullableV1PackageFilters struct {
	value *V1PackageFilters
	isSet bool
}

func (v NullableV1PackageFilters) Get() *V1PackageFilters {
	return v.value
}

func (v *NullableV1PackageFilters) Set(val *V1PackageFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PackageFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PackageFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PackageFilters(val *V1PackageFilters) *NullableV1PackageFilters {
	return &NullableV1PackageFilters{value: val, isSet: true}
}

func (v NullableV1PackageFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PackageFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


