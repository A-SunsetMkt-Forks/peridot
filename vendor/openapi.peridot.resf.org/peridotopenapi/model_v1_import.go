/*
 * peridot/proto/v1/batch.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: version not set
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package peridotopenapi

import (
	"encoding/json"
	"time"
)

// V1Import struct for V1Import
type V1Import struct {
	Id *string `json:"id,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Name *string `json:"name,omitempty"`
	TaskId *string `json:"taskId,omitempty"`
	Status *V1TaskStatus `json:"status,omitempty"`
	Revisions *[]V1ImportRevision `json:"revisions,omitempty"`
}

// NewV1Import instantiates a new V1Import object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Import() *V1Import {
	this := V1Import{}
	var status V1TaskStatus = UNSPECIFIED
	this.Status = &status
	return &this
}

// NewV1ImportWithDefaults instantiates a new V1Import object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ImportWithDefaults() *V1Import {
	this := V1Import{}
	var status V1TaskStatus = UNSPECIFIED
	this.Status = &status
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1Import) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Import) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1Import) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1Import) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *V1Import) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Import) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *V1Import) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *V1Import) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1Import) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Import) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1Import) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1Import) SetName(v string) {
	o.Name = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *V1Import) GetTaskId() string {
	if o == nil || o.TaskId == nil {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Import) GetTaskIdOk() (*string, bool) {
	if o == nil || o.TaskId == nil {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *V1Import) HasTaskId() bool {
	if o != nil && o.TaskId != nil {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *V1Import) SetTaskId(v string) {
	o.TaskId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *V1Import) GetStatus() V1TaskStatus {
	if o == nil || o.Status == nil {
		var ret V1TaskStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Import) GetStatusOk() (*V1TaskStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *V1Import) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given V1TaskStatus and assigns it to the Status field.
func (o *V1Import) SetStatus(v V1TaskStatus) {
	o.Status = &v
}

// GetRevisions returns the Revisions field value if set, zero value otherwise.
func (o *V1Import) GetRevisions() []V1ImportRevision {
	if o == nil || o.Revisions == nil {
		var ret []V1ImportRevision
		return ret
	}
	return *o.Revisions
}

// GetRevisionsOk returns a tuple with the Revisions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Import) GetRevisionsOk() (*[]V1ImportRevision, bool) {
	if o == nil || o.Revisions == nil {
		return nil, false
	}
	return o.Revisions, true
}

// HasRevisions returns a boolean if a field has been set.
func (o *V1Import) HasRevisions() bool {
	if o != nil && o.Revisions != nil {
		return true
	}

	return false
}

// SetRevisions gets a reference to the given []V1ImportRevision and assigns it to the Revisions field.
func (o *V1Import) SetRevisions(v []V1ImportRevision) {
	o.Revisions = &v
}

func (o V1Import) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.TaskId != nil {
		toSerialize["taskId"] = o.TaskId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Revisions != nil {
		toSerialize["revisions"] = o.Revisions
	}
	return json.Marshal(toSerialize)
}

type NullableV1Import struct {
	value *V1Import
	isSet bool
}

func (v NullableV1Import) Get() *V1Import {
	return v.value
}

func (v *NullableV1Import) Set(val *V1Import) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Import) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Import) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Import(val *V1Import) *NullableV1Import {
	return &NullableV1Import{value: val, isSet: true}
}

func (v NullableV1Import) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Import) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


